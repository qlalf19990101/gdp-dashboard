# -*- coding: utf-8 -*-
"""뉴스기사앱_중간

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eWmG1Wz2fUf_ufubf3dQX2W0zcKCzgbr
"""

# 필요한 함수들 먼저 import 하기

import streamlit as st
import pandas as pd
import requests
from bs4 import BeautifulSoup

# 뉴스데이터 가져오고 필터링
def get_all_news():
    all_news_df = pd.DataFrame()
    pressDt = {'MBC': '214', '연합뉴스': '422', 'KBS': '056', 'JTBC': '437',
           'MBN': '057', 'SBS': '055', 'SBS_Biz': '374', 'TV조선': '448',
           'YTN': '052', '뉴스1': '421', '뉴시스': '003', '연합뉴스TV': '422',
           '채널A': '449', '한국경제TV': '215'}
    for press, code in pressDt.items():
        url = f'https://media.naver.com/press/{code}/ranking?/type=popular'

        response = requests.get(url)
        soup = BeautifulSoup(response.text, 'html.parser')

        data = []
        for item in soup.select('li.as_thumb'):
            rank = item.select_one('em.list_ranking_num').text
            title = item.select_one('strong.list_title').text
            link = item.select_one('a._es_pc_link')['href']
            views_element = item.select_one('span.list_view')
            views = views_element.text if views_element else ""  # 조회수 정보가 없으면 빈 문자열 사용
            data.append({'순위': int(rank), '제목': title, '조회수': views, '언론사': press, '링크': link})

        df = pd.DataFrame(data)
        df['조회수'] = df['조회수'].apply(lambda x: int(x.replace('\n조회수\n', '').replace('\n', '').replace(',', '').strip()) if x != "" else 0)
        all_news_df = pd.concat([all_news_df, df])

    return all_news_df


def sort_news(df_news):
    specific_press = st.radio('특정 언론사만 보겠습니까?', ('Y', 'N'))

    if specific_press == 'Y':
        selected_press = st.selectbox('보고싶은 언론사를 선택해주세요',
                              ("MBC", "JTBC", "KBS", "연합뉴스",
                               "MBN", "SBS", "SBS_Biz", "TV조선",
                               "YTN", "뉴스1", "뉴시스", "연합뉴스TV",
                               "채널A", "한국경제TV"))
        df_filtered = df_news[df_news['언론사'] == selected_press]
        if df_filtered.empty:
            st.write(f"{selected_press}에 대한 뉴스가 없습니다.")
            return
    else:
        df_filtered = df_news

    criteria = st.selectbox('정렬할 기준을 선택해주세요', ("조회수", "언론사", "순위"))

    if criteria == '조회수':
        sorted_df = df_filtered.sort_values(by='조회수', ascending=False)
    elif criteria == '언론사':
        sorted_df = df_filtered.sort_values(by=['언론사', '순위'])
    elif criteria == '순위':
        sorted_df = df_filtered.sort_values(by='순위')
    return sorted_df

# 뉴스 데이터 가져오기
df_news = get_all_news()


def page1():
    st.title("뉴스 뷰어 - 필터 선택")

    # 세션 상태 초기화
    if 'specific_press' not in st.session_state:
        st.session_state['specific_press'] = 'N'
    if 'selected_press' not in st.session_state:
        st.session_state['selected_press'] = "MBC"
    if 'criteria' not in st.session_state:
        st.session_state['criteria'] = "조회수"

    st.session_state['specific_press'] = st.radio('특정 언론사만 보겠습니까?', ('Y', 'N'), key='press_radio')

    if st.session_state['specific_press'] == 'Y':
        st.session_state['selected_press'] = st.selectbox('보고싶은 언론사를 선택해주세요',
                                ("MBC", "JTBC", "KBS", "연합뉴스",
                                 "MBN", "SBS", "SBS_Biz", "TV조선",
                                 "YTN", "뉴스1", "뉴시스", "연합뉴스TV",
                                 "채널A", "한국경제TV"), key='press_select')

    st.session_state['criteria'] = st.selectbox('정렬할 기준을 선택해주세요', ("조회수", "언론사", "순위"), key='criteria_select')

# 링크를 클릭 가능하게 만드는 함수 (page2 함수 외부로 이동)
def make_clickable(val):
    return f'<a target="_blank" href="{val}">링크</a>'


def page2():
    st.title("오늘의 뉴스")  # 타이틀 변경

    # 세션 상태에서 선택된 값 가져오기
    specific_press = st.session_state['specific_press']
    selected_press = st.session_state['selected_press']
    criteria = st.session_state['criteria']

    # 검색어 입력
    search_keyword = st.text_input("검색어를 입력하세요:")
    
    # 뉴스 데이터 필터링 및 정렬
    df_filtered = df_news.copy()
    if specific_press == 'Y':
        df_filtered = df_filtered[df_filtered['언론사'] == selected_press]
    if search_keyword:
        df_filtered = df_filtered[df_filtered['제목'].str.contains(search_keyword)]
    
    # 검색 결과가 없는 경우 처리
    if df_filtered.empty:
        st.write("검색 결과가 없습니다.")
    else: # 검색 결과가 있는 경우에만 정렬
        if criteria == '조회수':
            df_filtered = df_filtered.sort_values(by='조회수', ascending=False)
        elif criteria == '언론사':
            df_filtered = df_filtered.sort_values(by=['언론사', '순위'])
        elif criteria == '순위':
            df_filtered = df_filtered.sort_values(by='순위')


    # 페이지네이션
    page_size = 20
    total_pages = (len(df_filtered) + page_size - 1) // page_size  # 전체 페이지 수 계산

    if 'page_number' not in st.session_state:
        st.session_state['page_number'] = 1  # 현재 페이지 번호를 세션 상태에 저장

    col1, col2, col3 = st.columns([1, 3, 1])  # 페이지 이동 버튼을 위한 레이아웃

    if st.session_state['page_number'] > 1:  # 1페이지에서는 이전 페이지 버튼 숨김
        if col1.button("이전 페이지"):
            st.session_state['page_number'] -= 1
            st.experimental_rerun()  # 페이지 새로고침

    # 페이지 번호 입력 필드 추가 (col1에 추가)
    st.session_state['page_number'] = col1.number_input("페이지 번호 입력:", min_value=1, max_value=total_pages, value=st.session_state['page_number'], step=None)

    # 페이지 번호 중앙 정렬 (st.columns 내부로 이동)
    col2.markdown(f'<div style="text-align: center;">페이지: {st.session_state["page_number"]} / {total_pages}</div>', unsafe_allow_html=True)

    if st.session_state['page_number'] < total_pages:
        if col3.button("다음 페이지"):
            st.session_state['page_number'] += 1
            st.experimental_rerun()  # 페이지 새로고침

    start_index = (st.session_state['page_number'] - 1) * page_size
    end_index = start_index + page_size
    df_page = df_filtered.iloc[start_index:end_index]


     # 스타일 적용 및 인덱스 재설정
    df_styled = df_page.reset_index(drop=True).style.format({'링크': make_clickable})
    df_styled = df_styled.set_properties(**{'text-align': 'left'})
    df_styled = df_styled.set_table_styles([dict(selector='th', props=[('text-align', 'left')])])
    st.write(df_styled, unsafe_allow_html=True)  # Streamlit에 데이터프레임 표시

    # 링크를 버튼처럼 보이도록 스타일링
    for idx, (index, row) in enumerate(df_page.iterrows()):
        st.write(f"{row['순위']}. {row['제목']} ({row['언론사']}, 조회수: {row['조회수']})")
        st.markdown(f'<a href="{row["링크"]}" target="_blank" style="display: inline-block; padding: 10px 20px; background-color: #4CAF50; color: white; text-decoration: none; border-radius: 5px;">기사 보기</a>', unsafe_allow_html=True)


# 앱 실행 및 페이지 관리
if 'page' not in st.session_state:
    st.session_state['page'] = "필터 선택"

page = st.sidebar.radio("페이지 선택", ("필터 선택", "뉴스 보기"))
st.session_state['page'] = page

if st.session_state['page'] == "필터 선택":
    page1()
elif st.session_state['page'] == "뉴스 보기":
    page2()
